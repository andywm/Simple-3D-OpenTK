using System;
using System.Collections.Generic;
using Labs.Utility;
using OpenTK;
using OpenTK.Input;
using OpenTK.Graphics;
using OpenTK.Graphics.OpenGL;
using Labs.Lab4;

//Methods marksed as #Set_Up are there to prevent code duplication. They are not and should not be called outside the constructors.

namespace Labs.ACW
{
    public static class Aesthetics
    {
        //public static Vector4 DodgerBlue = new Vector4(0.11764f, 0.56471f, 1, 1);
        //public static Vector4 Orange = new Vector4(1, 0.49803f, 0, 1);
        //public static Vector4 Crimson = new Vector4(0.6f, 0, 0, 1);
        //public static Vector4 MidGrey = new Vector4(0.5f, 0.5f, 0.5f, 1);

        public struct Material
        {
            public Vector3 Ambient;
            public Vector3 Diffuse;
            public Vector3 Specular;
            public float Shininess;

            public Material(Vector3 am, Vector3 di, Vector3 sp, float sh)
            {
                Ambient = am;
                Diffuse = di;
                Specular = sp;
                Shininess = sh;
            }
        }
        public static Material DodgerBlue_Matte = new Material
        (
            new Vector3(0.1f, 0.1f, 0.1f),
            new Vector3(0.11764f, 0.56471f, 1),
            new Vector3(0.05f, 0.05f, 0.05f),
            0.3f
        );
        public static Material Orange_Shinny = new Material
        (
            new Vector3(0.25f, 0.25f, 0.25f),
            new Vector3(1, 0.49803f, 0),
            new Vector3(0.774597f, 0.774597f, 0.774597f),
            0.6f * 128
        );
        public static Material MidGrey = new Material
        (
            new Vector3(0.25f, 0.25f, 0.25f),
            new Vector3(0.5f, 0.5f, 0.5f),
            new Vector3(0.3f, 0.3f, 0.3f),
            0.2f * 128
        );
        public static Material Crimson = new Material
        (
            new Vector3(0.25f, 0.25f, 0.25f),
            new Vector3(0.6f, 0, 0),
            new Vector3(0.3f, 0.3f, 0.3f),
            0.3f * 128
        );
    }

    public abstract class WorldObject
    {
        //Public Members//
        public Vector4 vPosition;


    }
    /*
    public class DirectionLight : WorldObject
    {
        const int maxAlloc = 2;
        static int currentAllocation=0;
        private Vector4 apparantOrigin;
        private Vector3 colour;

        public DirectionLight()
        {
            apparantOrigin= vPosition;// new Vector4(2+ i, 4 - i, -8.5f, 1);
              //  apparantOrigin = Vector4.Transform(apparantOrigin, mView);
              //  GL.Uniform4(uLightPositionLocation[i], lightPosition[i]);
        }

    }*/

    public abstract class Shape : WorldObject
    {
        //Protected Members//
        protected Vector4 colour;
        protected Aesthetics.Material material;
        protected Matrix4 mTransformations;
        public int current_space;
        //Adds a bit of colour...
        public virtual void Draw(ref ShaderUtility mShader)
        {
            int uAmbientLightReflect = GL.GetUniformLocation(mShader.ShaderProgramID, "uMaterial.AmbientReflectivity");
            int uDiffuseLightReflect = GL.GetUniformLocation(mShader.ShaderProgramID, "uMaterial.DiffuseReflectivity");
            int uSpecularLightReflect = GL.GetUniformLocation(mShader.ShaderProgramID, "uMaterial.SpecularReflectivity");
            int uShine = GL.GetUniformLocation(mShader.ShaderProgramID, "uMaterial.Shininess");

            GL.Uniform3(uAmbientLightReflect, this.material.Ambient);
            GL.Uniform3(uDiffuseLightReflect, this.material.Diffuse);
            GL.Uniform3(uSpecularLightReflect, this.material.Specular);
            GL.Uniform1(uShine, this.material.Shininess);
        }

        #region set_up_methods
        public void SetColour(ref Vector4 col)
        {
            this.colour = col;
        }
        public void SetMaterial(ref Aesthetics.Material mater)
        {
            this.material = mater;
        }
        public void SetPosition(ref Vector3 pos)
        {
            vPosition = new Vector4(pos.X * ACWWindow.Centimetre, pos.Y * ACWWindow.Centimetre, pos.Z * ACWWindow.Centimetre, 0);
        }
        protected virtual void InitTransform()
        {
            mTransformations = Matrix4.CreateTranslation(vPosition.X, vPosition.Y, vPosition.X);
        }
        #endregion 
    }

    public abstract class Sphere : Shape
    {
        //Public Members//
        public float radius;
        //Protected Members//
        protected static ModelUtility mModelUtility = ModelUtility.LoadModel(@"Utility/Models/sphere.bin");
        protected static int[] VBO = new int[2];
        protected static int VAO;
        
        public static void LoadGeometry(ref ShaderUtility mShader)
        {
            GL.GenBuffers(2, VBO);
            VAO = GL.GenVertexArray();

            int vPositionLocation = GL.GetAttribLocation(mShader.ShaderProgramID, "vPosition");
            int vNormal = GL.GetAttribLocation(mShader.ShaderProgramID, "vNormal");

            GL.BindVertexArray(VAO);
            GL.BindBuffer(BufferTarget.ArrayBuffer, VBO[0]);
            GL.BufferData(BufferTarget.ArrayBuffer, (IntPtr)(mModelUtility.Vertices.Length * sizeof(float)), mModelUtility.Vertices, BufferUsageHint.StaticDraw);

            GL.BindBuffer(BufferTarget.ElementArrayBuffer, VBO[1]);
            GL.BufferData(BufferTarget.ElementArrayBuffer, (IntPtr)(mModelUtility.Indices.Length * sizeof(float)), mModelUtility.Indices, BufferUsageHint.StaticDraw);

            int size;
            GL.GetBufferParameter(BufferTarget.ArrayBuffer, BufferParameterName.BufferSize, out size);
            if (mModelUtility.Vertices.Length * sizeof(float) != size)
            {
                throw new ApplicationException("Vertex data not loaded onto graphics card correctly");
            }

            GL.GetBufferParameter(BufferTarget.ElementArrayBuffer, BufferParameterName.BufferSize, out size);
            if (mModelUtility.Indices.Length * sizeof(float) != size)
            {
                throw new ApplicationException("Index data not loaded onto graphics card correctly");
            }

            GL.EnableVertexAttribArray(vPositionLocation);
            GL.EnableVertexAttribArray(vNormal);
            GL.VertexAttribPointer(vPositionLocation, 3, VertexAttribPointerType.Float, false, 6 * sizeof(float), 0);
            GL.VertexAttribPointer(vNormal, 3, VertexAttribPointerType.Float, true, 6 * sizeof(float), 3 * sizeof(float));
        }
        public static void UnloadGeometry()
        {
            GL.BindBuffer(BufferTarget.ArrayBuffer, 0);
            GL.BindBuffer(BufferTarget.ElementArrayBuffer, 0);
            GL.BindVertexArray(0);
            GL.DeleteBuffers(VBO.Length, VBO);
            GL.DeleteVertexArray(VAO);

        }

        #region set_up_methods
        public void SetRadius(ref float rad)
        {
            radius = rad;
        }
        protected override void InitTransform()
        {
            mTransformations = Matrix4.CreateScale(radius * ACWWindow.Centimetre, radius * ACWWindow.Centimetre, radius * ACWWindow.Centimetre) * Matrix4.CreateTranslation(vPosition.X, vPosition.Y, vPosition.X);
        }
        #endregion
    }

    public class Ball : Sphere //Is Physics Object...
    {
        //Public Members//
        public List<SpatialRegion> CollisionCheckRegion = new List<SpatialRegion>(); 
        public Vector4 velocity = new Vector4(0, -6.6f, 0, 0);
        public Vector4 vOldPosition;
        //Metadata for Physics Interaction Visualisation.
        public Vector4 NearestContact;
        public float DistanceToNearestObject=1000;
        //Private Members//
        private float density;

        public float GetMass()
        {
            return (float) ((4 / 3) * Math.PI * Math.Pow(radius*1E-2, 3) * density); //Convert Back to real units.
        }
        public Ball(ref Vector3 PositionVector, float Radius, ref float Density)
        {
            SetPosition(ref PositionVector);
            SetRadius(ref Radius);
            SetDensity(ref Density);
            InitTransform();
        }
        public Ball(ref Vector3 PositionVector, float Radius, ref float Density, ref Aesthetics.Material Material)
        {
            SetPosition(ref PositionVector);
            SetRadius(ref Radius);
            SetDensity(ref Density);
            InitTransform();
            //SetColour(ref Colour);
            SetMaterial(ref Material);
            vOldPosition = vPosition;
        }
        public bool IsInRegion(SpatialRegion reg)
        {
            foreach(SpatialRegion r in CollisionCheckRegion)
            {
                if(reg == r)
                {
                    return true;
                }
            }
            return false;
        }
        public void ShowPhysicsData(ref ShaderUtility mShader)
        {
            Vector4 normalVelocity = velocity.Normalized();
            int uAmbientLightReflect = GL.GetUniformLocation(mShader.ShaderProgramID, "uMaterial.AmbientReflectivity");
            GL.Uniform3(uAmbientLightReflect, this.material.Ambient);
            Vector3 limeGreen = new Vector3(0, 100, 0);
            Vector3 red = new Vector3(100, 0, 0);
            Vector3 orange = new Vector3(100,100,0);
            GL.Uniform3(uAmbientLightReflect, limeGreen);

            //Likely Collision.
            GL.Uniform3(uAmbientLightReflect, limeGreen);
            GL.Begin(PrimitiveType.Lines);
            GL.LineWidth(4);
            GL.Vertex3(0, 0, 0);
            GL.Vertex3(NearestContact.X, NearestContact.Y, NearestContact.Z);
            GL.End();
            //Velocity Vector
            GL.LineWidth(2);
            GL.Uniform3(uAmbientLightReflect, red);
            GL.Begin(PrimitiveType.Lines);
            GL.Vertex3(0, 0, 0);
            GL.Vertex3(normalVelocity.X*10,normalVelocity.Y*10, normalVelocity.Z*10);
            GL.End();
            GL.LineWidth(1);
   
        }
        public void updateScale()
        {
            mTransformations *= Matrix4.CreateTranslation(0,0,0);
            mTransformations = Matrix4.CreateScale(radius * ACWWindow.Centimetre, radius * ACWWindow.Centimetre, radius * ACWWindow.Centimetre);
            mTransformations *= Matrix4.CreateTranslation(vPosition.X, vPosition.Y, vPosition.Z);
        }
        public override void Draw(ref ShaderUtility mShader)
        {
            int uModel = GL.GetUniformLocation(mShader.ShaderProgramID, "uModel");
            mTransformations.M41 = vPosition.X;
            mTransformations.M42 = vPosition.Y;
            mTransformations.M43 = vPosition.Z;
            GL.UniformMatrix4(uModel, true, ref mTransformations);
            GL.BindVertexArray(VAO);
            base.Draw(ref mShader);
            GL.DrawElements(PrimitiveType.Triangles, mModelUtility.Indices.Length, DrawElementsType.UnsignedInt, 0);
            DistanceToNearestObject = 1000;
        }

        #region set_up_methods
        public void SetDensity(ref float den)
        {
            density = den;
        }
       
        #endregion     
    }

    public class Doom : Sphere //Is Physics Object...
    {
        public Doom(ref Vector3 PositionVector, float Radius)
        {
            SetPosition(ref PositionVector);
            SetRadius(ref Radius);
            InitTransform();
        }
        public Doom(ref Vector3 PositionVector, float Radius, ref Aesthetics.Material Material)
        {
            SetPosition(ref PositionVector);
            SetRadius(ref Radius);
            InitTransform();
            SetMaterial(ref Material);
        }

        public override void Draw(ref ShaderUtility mShader)
        {
            int uModel = GL.GetUniformLocation(mShader.ShaderProgramID, "uModel");
            mTransformations.M41 = vPosition.X;
            mTransformations.M42 = vPosition.Y;
            mTransformations.M43 = vPosition.Z;
            GL.UniformMatrix4(uModel, true, ref mTransformations);
            GL.BindVertexArray(VAO);
            base.Draw(ref mShader);
            GL.DrawElements(PrimitiveType.Triangles, mModelUtility.Indices.Length, DrawElementsType.UnsignedInt, 0);
        }

        #region set_up_methods
        protected override void InitTransform()
        {
            mTransformations = Matrix4.CreateScale(radius * ACWWindow.Centimetre, radius * ACWWindow.Centimetre, radius * ACWWindow.Centimetre) * Matrix4.CreateTranslation(vPosition.X, vPosition.Y, vPosition.X);
        }
        #endregion
    }

    public class Cylinder : Shape
    {      
        //Private Members//
        static ModelUtility mModelUtility = ModelUtility.LoadModel(@"Utility/Models/cylinder.bin");
        static int[] VBO = new int[2];
        static int VAO;

        private Vector3 orientation;
        private float radius;
        private float length;


        public Cylinder(ref Vector3 v3, ref float rad, ref float len)
        {
            SetPosition(ref v3);
            SetRadius(ref rad);
            InitTransform();
        }
        public Cylinder(ref Vector3 v3, ref float rad, ref float len, ref Vector3 rot, ref Aesthetics.Material mater)
        {
            SetPosition(ref v3);
            SetRadius(ref rad);
            SetLength(ref len);
            Orient(ref rot);
            InitTransform();
            //SetColour(ref col);
            SetMaterial(ref mater);
        }
        
        public void GetCollisionData(out Vector4 cent, out float len, out Matrix4 tMat, out float rad)
        {
            cent = vPosition;
            tMat = mTransformations;
            len = length;
            rad = radius;
        }

        public static void LoadCylinder(ref ShaderUtility mShader)
        {
            GL.GenBuffers(2, VBO);
            VAO = GL.GenVertexArray();

            int vPositionLocation = GL.GetAttribLocation(mShader.ShaderProgramID, "vPosition");
            int vNormal = GL.GetAttribLocation(mShader.ShaderProgramID, "vNormal");

            GL.BindVertexArray(VAO);
            GL.BindBuffer(BufferTarget.ArrayBuffer, VBO[0]);
            GL.BufferData(BufferTarget.ArrayBuffer, (IntPtr)(mModelUtility.Vertices.Length * sizeof(float)), mModelUtility.Vertices, BufferUsageHint.StaticDraw);

            GL.BindBuffer(BufferTarget.ElementArrayBuffer, VBO[1]);
            GL.BufferData(BufferTarget.ElementArrayBuffer, (IntPtr)(mModelUtility.Indices.Length * sizeof(float)), mModelUtility.Indices, BufferUsageHint.StaticDraw);

            int size;
            GL.GetBufferParameter(BufferTarget.ArrayBuffer, BufferParameterName.BufferSize, out size);
            if (mModelUtility.Vertices.Length * sizeof(float) != size)
            {
                throw new ApplicationException("Vertex data not loaded onto graphics card correctly");
            }

            GL.GetBufferParameter(BufferTarget.ElementArrayBuffer, BufferParameterName.BufferSize, out size);
            if (mModelUtility.Indices.Length * sizeof(float) != size)
            {
                throw new ApplicationException("Index data not loaded onto graphics card correctly");
            }

            GL.EnableVertexAttribArray(vPositionLocation);
            GL.EnableVertexAttribArray(vNormal);
            GL.VertexAttribPointer(vPositionLocation, 3, VertexAttribPointerType.Float, false, 6 * sizeof(float), 0);
            GL.VertexAttribPointer(vNormal, 3, VertexAttribPointerType.Float, true, 6 * sizeof(float), 3 * sizeof(float));
        }
        public override void Draw(ref ShaderUtility mShader)
        {
            int uModel = GL.GetUniformLocation(mShader.ShaderProgramID, "uModel");

            GL.UniformMatrix4(uModel, true, ref mTransformations);
            GL.BindVertexArray(VAO);
            base.Draw(ref mShader);
            GL.DrawElements(PrimitiveType.Triangles, mModelUtility.Indices.Length, DrawElementsType.UnsignedInt, 0);
        }
        public static void UnloadGeometry()
        {
            GL.BindBuffer(BufferTarget.ArrayBuffer, 0);
            GL.BindBuffer(BufferTarget.ElementArrayBuffer, 0);
            GL.BindVertexArray(0);
            GL.DeleteBuffers(VBO.Length, VBO);
            GL.DeleteVertexArray(VAO);
        }

        #region set_up_memthods
        
        public void SetRadius(ref float rad)
        {
            radius = rad;
        }
        public void SetLength(ref float len)
        {
            length = len;
        }
        public void Orient(ref Vector3 rot)
        {
            orientation = new Vector3(rot.X, rot.Y, rot.Z);
        }
        protected override void InitTransform()
        {
            mTransformations = Matrix4.CreateScale(radius * ACWWindow.Centimetre, length * ACWWindow.Centimetre/2, radius * ACWWindow.Centimetre);
            // mTransformations *= Matrix4.CreateRotationX(orientation.X);
            mTransformations *= Matrix4.CreateRotationX(orientation.X);
            mTransformations *= Matrix4.CreateRotationY(orientation.Y);
            mTransformations *= Matrix4.CreateRotationZ(orientation.Z);
            mTransformations *= Matrix4.CreateTranslation(vPosition.X, vPosition.Y, vPosition.Z);
        }
        #endregion
    }

    public class Box : Shape
    {
        //Private Members//
        static int VAO;
        static int[] VBO = new int[2];
        static int[] indices; static float[] vertices;

        float size;


        public Box(ref Vector3 v3, ref float mySize)
        {
            SetPosition(ref v3);
            SetCubeSize(ref mySize);
            InitTransform();
        }
        public Box(ref Vector3 v3, ref float mySize, ref Aesthetics.Material mater)
        {
            SetPosition(ref v3);
            SetCubeSize(ref mySize);
            InitTransform();
            //SetColour(ref col);
            SetMaterial(ref mater);
        }

        public static void LoadSurface(ref ShaderUtility mShader)
        {
            GL.GenBuffers(2, VBO);
            VAO = GL.GenVertexArray();

            int vPositionLocation = GL.GetAttribLocation(mShader.ShaderProgramID, "vPosition");
            int vNormal = GL.GetAttribLocation(mShader.ShaderProgramID, "vNormal");
            vertices = new float[] {1,-1,-1,0,1,0,
                                            1,1,-1,0,1,0,
                                            -1,-1,-1,0,1,0,
                                            -1,1,-1,0,1,0,
                                            -1,-1,1,0,1,0,
                                            -1,1,1,0,1,0,
                                            1,-1,1,0,1,0,
                                            1,1,1,0,1,0,

                                            };

            indices = new int[] {
                                        0,1,2,3,4,5,6,7,0,1
                                        };
            //Ground...
            GL.BindVertexArray(VAO);
            GL.BindBuffer(BufferTarget.ArrayBuffer, VBO[0]);
            GL.BufferData(BufferTarget.ArrayBuffer, (IntPtr)(vertices.Length * sizeof(float)), vertices, BufferUsageHint.StaticDraw);

            GL.BindBuffer(BufferTarget.ElementArrayBuffer, VBO[1]);
            GL.BufferData(BufferTarget.ElementArrayBuffer, (IntPtr)(indices.Length * sizeof(float)), indices, BufferUsageHint.StaticDraw);

            int size;
            GL.GetBufferParameter(BufferTarget.ArrayBuffer, BufferParameterName.BufferSize, out size);
            if (vertices.Length * sizeof(float) != size)
            {
                throw new ApplicationException("Vertex data not loaded onto graphics card correctly");
            }

            GL.GetBufferParameter(BufferTarget.ElementArrayBuffer, BufferParameterName.BufferSize, out size);
            if (indices.Length * sizeof(float) != size)
            {
                throw new ApplicationException("Index data not loaded onto graphics card correctly");
            }


            GL.EnableVertexAttribArray(vPositionLocation);
            GL.EnableVertexAttribArray(vNormal);
            GL.VertexAttribPointer(vPositionLocation, 3, VertexAttribPointerType.Float, false, 6 * sizeof(float), 0);
            GL.VertexAttribPointer(vNormal, 3, VertexAttribPointerType.Float, true, 6 * sizeof(float), 3 * sizeof(float));
        }
        public override void Draw(ref ShaderUtility mShader)
        {
            int uModel = GL.GetUniformLocation(mShader.ShaderProgramID, "uModel");
            GL.UniformMatrix4(uModel, true, ref mTransformations);
            GL.BindVertexArray(VAO);
            base.Draw(ref mShader);
            GL.DrawElements(PrimitiveType.TriangleStrip, indices.Length, DrawElementsType.UnsignedInt, 0);

        }
        public static void UnloadGeometry()
        {
            GL.BindBuffer(BufferTarget.ArrayBuffer, 0);
            GL.BindBuffer(BufferTarget.ElementArrayBuffer, 0);
            GL.BindVertexArray(0);
            GL.DeleteBuffers(VBO.Length, VBO);
            GL.DeleteVertexArray(VAO);
        }

        #region set_up_methods
        public void SetCubeSize(ref float mySize)
        {
            size = mySize;
        }
        protected override void InitTransform()
        {
            mTransformations = Matrix4.CreateScale(size * ACWWindow.Centimetre/2, size * ACWWindow.Centimetre/2, size * ACWWindow.Centimetre/2) * Matrix4.CreateTranslation(vPosition.X, vPosition.Y, vPosition.X);
        }
        #endregion
    }

    public class Surface : Shape //Probably Obsolete.
    {
        //Private Members//
        static int VAO;
        static int[] VBO = new int[2];

        float size;


        public Surface(ref Vector3 v3, ref float mySize)
        {
            SetPosition(ref v3);
            SetCubeSize(ref mySize);
            InitTransform();
        }
        public Surface(ref Vector3 v3, ref float mySize, ref Aesthetics.Material mater)
        {
            SetPosition(ref v3);
            SetCubeSize(ref mySize);
            InitTransform();
            //SetColour(ref col);
            SetMaterial(ref mater);
        }

        public static void LoadSurface(ref ShaderUtility mShader)
        {
            VBO[0] = GL.GenBuffer();
            //VBO[1] = GL.GenBuffer();
            VAO = GL.GenVertexArray();

            int vPositionLocation = GL.GetAttribLocation(mShader.ShaderProgramID, "vPosition");
            int vNormal = GL.GetAttribLocation(mShader.ShaderProgramID, "vNormal");
            //Ground verticies?
            float[] vertices = new float[] {-1, 0, -1,0,1,0,
                                             -1, 0, 1,0,1,0,
                                             1, 0, 1,0,1,0,
                                             1, 0, -1,0,1,0,};
            //Ground...
            GL.BindVertexArray(VAO);
            GL.BindBuffer(BufferTarget.ArrayBuffer, VBO[0]);
            GL.BufferData(BufferTarget.ArrayBuffer, (IntPtr)(vertices.Length * sizeof(float)), vertices, BufferUsageHint.StaticDraw);

            int size;
            GL.GetBufferParameter(BufferTarget.ArrayBuffer, BufferParameterName.BufferSize, out size);
            if (vertices.Length * sizeof(float) != size)
            {
                throw new ApplicationException("Vertex data not loaded onto graphics card correctly");
            }

            GL.EnableVertexAttribArray(vPositionLocation);
            GL.EnableVertexAttribArray(vNormal);
            GL.VertexAttribPointer(vPositionLocation, 3, VertexAttribPointerType.Float, false, 6 * sizeof(float), 0);
            GL.VertexAttribPointer(vNormal, 3, VertexAttribPointerType.Float, true, 6 * sizeof(float), 3 * sizeof(float));
        }
        public override void Draw(ref ShaderUtility mShader)
        {
            Matrix4 mGroundModel = Matrix4.CreateTranslation(0, 0, -5f);
            int uModel = GL.GetUniformLocation(mShader.ShaderProgramID, "uModel");

            GL.UniformMatrix4(uModel, true, ref mTransformations);
            GL.BindVertexArray(VAO);
            Vector3 colour = new Vector3(0f, 0.6f, 1.0f);
            Vector3 reflection = new Vector3(0.3f, 0.3f, 0.3f);
            base.Draw(ref mShader);
            GL.DrawArrays(PrimitiveType.TriangleFan, 0, 4);
        }
        public static void UnloadGeometry()
        {
            GL.BindBuffer(BufferTarget.ArrayBuffer, 0);
            GL.BindBuffer(BufferTarget.ElementArrayBuffer, 0);
            GL.BindVertexArray(0);
            GL.DeleteBuffers(VBO.Length, VBO);
            GL.DeleteVertexArray(VAO);
        }

        #region set_up_methods
        public void SetCubeSize(ref float mySize)
        {
            size = mySize;
        }
        protected override void InitTransform()
        {
            mTransformations = Matrix4.CreateScale(size * ACWWindow.Centimetre, size * ACWWindow.Centimetre, size * ACWWindow.Centimetre) * Matrix4.CreateTranslation(vPosition.X, vPosition.Y, vPosition.X);
        }
        #endregion

    }
}
